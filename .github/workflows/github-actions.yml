name: Zip Lambda & Upload to S3

# Controls when the workflow will run
on:
  # Triggers the workflow on push to main or any pull requests
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  test_crawler:
    runs-on: ubuntu-latest
    environment: dev
    steps:
    - uses: actions/checkout@master

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - run: pip install poetry
    - run: poetry install
      working-directory: ./crawler/

    build_crawler:
      needs: test_crawler
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v2

      - uses: ./crawler/
        name: build the crawler lambda artifact

      - uses: actions/upload-artifact@v2
        name: Upload zip of crawler lambda
        with:
          name: crawler_lambda
          path: dist.zip

  zip_and_upload_test_lambda:
    runs-on: ubuntu-latest
    environment: dev
    steps:
    - name: Get the repo files
      uses: actions/checkout@master

    - name: Create artifacts folder
      run: mkdir -p ./artifacts

    - name: Install zip
      uses: montudor/action-zip@v1

    - name: Zip lambda files
      run: zip -r ../artifacts/hello_world_lambda.zip .
      working-directory: ./lambda

    - name: Upload zip of lambda
      uses: actions/upload-artifact@v3
      with:
        name: hello_world_lambda
        path: ./artifacts/hello_world_lambda.zip

  terraform_plan_or_apply:
    needs: zip_and_upload_test_lambda
    runs-on: ubuntu-latest
    environment: dev
    steps:
    - name: Get the repo files
      uses: actions/checkout@master

    - name: Download all artifacts to the artifacts folder
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    # Terraform commands mostly taken from https://learn.hashicorp.com/tutorials/terraform/github-actions

    - name: Set up the terraform CLI
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_version: 1.2.2

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -input=false
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false