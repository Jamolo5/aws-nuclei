name: Zip Lambda & Upload to S3

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

jobs:
  zip_and_upload_lambda:
    runs-on: ubuntu-latest
    environment: dev
    steps:
    - name: Get the repo files
      uses: actions/checkout@master

    - name: Create artifacts folder
      run: mkdir -p ./artifacts

    - name: Zip the contents of the lambda folder
      uses: montudor/action-zip@v1
      with:
        args: zip -r ./artifacts/lambda_function_payload.zip lambda

    - name: Upload zip of lambda
      uses: actions/upload-artifact@v3
      with:
        name: lambda-payload
        path: ./artifacts/lambda_function_payload.zip

  terraform_plan:
    needs: zip_and_upload_lambda
    runs-on: ubuntu-latest
    environment: dev
    steps:
    - name: Get the repo files
      uses: actions/checkout@master

    - name: Download the payload that was previous built/zipped/uploaded
      uses: actions/download-artifact@v3
      with:
        name: lambda-payload
        path: artifacts
    
    # Terraform commands mostly taken from https://learn.hashicorp.com/tutorials/terraform/github-actions
    # More rework will be needed here if I want a nice plan on PR, apply on merge process

    - name: Set up the terraform CLI
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_version: 1.2.2

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -input=false
      # continue-on-error: true